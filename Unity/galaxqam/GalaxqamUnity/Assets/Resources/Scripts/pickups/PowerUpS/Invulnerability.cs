using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;

public class Invulnerability : MonoBehaviour
{

    /*
     * invincibilty = invulnerable apres un degat
     *invincibility2 = power up invulnerabilit√© 
     *
    */

    public float invincibleTime;

    private float blinkTtime = 0.1f;

    public bool isInvincible = false;

    //couleur de power up
    public Material blank;

    public Material[] invincibilityVisual;
    private Material[] originColor;

    public MeshRenderer mesh;
    
    // Start is called before the first frame update
    void Start()
    {
        mesh = gameObject.transform.GetChild(1).GetComponent<MeshRenderer>();
        originColor = mesh.materials;
       
        blank = Resources.Load<Material>("Materials/default");
        invincibilityVisual = mesh.materials;
        invincibilityVisual[0] = blank;
        invincibilityVisual[1] = blank;

        //filter = gameObject.transform.GetChild(1).GetComponent<MeshFilter>();
    }

    // Update is called once per frame
    void Update()
    {
        if(Input.GetKeyDown(KeyCode.I))
        {
            beginInvincibility(invincibleTime);
        }else if (Input.GetKeyDown(KeyCode.B))
        {
            beginInvincibility2(invincibleTime);


            Debug.Log("je deviens blanc");

         
        }
    }

    public void beginInvincibility(float time)
    {
        isInvincible = true;
        StartCoroutine(rendererInvicible());
        StartCoroutine(timeInvisible(time));
    }

    IEnumerator rendererInvicible()
    {
        while (isInvincible == true)
        {   
            mesh.enabled = false;
            yield return new WaitForSeconds(blinkTtime);
            mesh.enabled = true;
            yield return new WaitForSeconds(blinkTtime);
        }
        yield return null;
    }
    public void beginInvincibility2(float time)
    {
        isInvincible = true;
        StartCoroutine(rendererInvicible2());
        StartCoroutine(timeInvisible(time));
    }

    IEnumerator rendererInvicible2()
    {
        while (isInvincible == true)
        {
            mesh.materials = invincibilityVisual;
            yield return new WaitForSeconds(0.05f);
            mesh.materials = originColor;
            yield return new WaitForSeconds(0.05f);
        }
        yield return null;
    }

    IEnumerator timeInvisible(float count)
    {
       yield return new WaitForSeconds(count);
        isInvincible = false;



    }
}
